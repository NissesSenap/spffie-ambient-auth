apiVersion: v1
kind: ConfigMap
metadata:
  name: test-oidc-flow-script
  namespace: app
data:
  test-oidc-flow.py: |
    #!/usr/bin/env python3
    """
    Test script to get user tokens from Authentik and test service authentication
    """

    import requests
    import json
    import sys
    import os
    import socket
    import ssl
    import urllib3
    from urllib3.exceptions import InsecureRequestWarning
    
    # Disable SSL warnings since we're testing with self-signed certs
    urllib3.disable_warnings(InsecureRequestWarning)

    def get_spiffe_id():
        """Try to get our own SPIFFE ID from the Workload API"""
        try:
            # Check if SPIRE Workload API is available
            workload_api_socket = os.environ.get('SPIFFE_ENDPOINT_SOCKET', 'unix:///tmp/spire-agent/public/api.sock')
            if workload_api_socket.startswith('unix://'):
                socket_path = workload_api_socket[7:]
                if os.path.exists(socket_path):
                    print(f"‚úÖ SPIRE Workload API socket found at: {socket_path}")
                    # Note: We'd need the SPIRE Go SDK or similar to actually fetch the SVID
                    # For now, we'll just confirm the socket exists
                    return f"spiffe://example.org/ns/app/sa/test-oidc-flow"
                else:
                    print(f"‚ùå SPIRE Workload API socket not found at: {socket_path}")
            return None
        except Exception as e:
            print(f"‚ùå Failed to check SPIFFE ID: {e}")
            return None

    def get_user_token(username, password):
        """Get an access token for a user using OAuth2 Resource Owner Password Credentials Grant"""
        
        # Use internal Kubernetes service endpoint
        authentik_url = "http://authentik-server.authentik.svc.cluster.local:80"
        
        # OAuth2 token endpoint
        token_url = f"{authentik_url}/application/o/token/"
        
        # For the SPIFFE application we created
        client_id = "spiffe://example.org/service-b"
        
        data = {
            "grant_type": "password",
            "username": username,
            "password": password,
            "client_id": client_id,
            "scope": "openid profile email"
        }
        
        try:
            response = requests.post(token_url, data=data)
            
            if response.status_code == 200:
                token_data = response.json()
                print(f"‚úÖ Successfully got token for user: {username}")
                print(f"Access Token: {token_data.get('access_token', 'N/A')[:50]}...")
                print(f"ID Token: {token_data.get('id_token', 'N/A')[:50]}...")
                print(f"Token Type: {token_data.get('token_type', 'N/A')}")
                print(f"Expires In: {token_data.get('expires_in', 'N/A')} seconds")
                return token_data.get('access_token')
            else:
                print(f"‚ùå Failed to get token for {username}: {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Request failed: {e}")
            return None

    def test_service_with_token(token):
        """Test calling service-a with a user token"""
        
        if not token:
            print("‚ùå No token to test with")
            return
        
        # Test calling service-a using internal Kubernetes service endpoint
        service_url = "http://service-a.app.svc.cluster.local:8081/hello"
        
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        try:
            print(f"\nüß™ Testing service-a call with user token...")
            response = requests.get(service_url, headers=headers)
            
            print(f"Status: {response.status_code}")
            print(f"Response: {response.text}")
            
            if response.status_code == 200:
                print("‚úÖ Service-a call successful!")
            else:
                print("‚ùå Service-a call failed")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Service-a call failed: {e}")

    def test_service_b_with_token(token):
        """Test calling service-b directly with a user token"""
        
        if not token:
            print("‚ùå No token to test with")
            return
        
        # Test calling service-b using internal Kubernetes service endpoint
        # Note: This requires the test pod to have proper certificates or skip verification
        service_url = "https://service-b.app.svc.cluster.local:8080/hello"
        
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        try:
            print(f"\nüß™ Testing service-b call with user token...")
            # Skip SSL verification for testing (service-b uses SPIRE certs)
            response = requests.get(service_url, headers=headers, verify=False)
            
            print(f"Status: {response.status_code}")
            print(f"Response: {response.text}")
            
            if response.status_code == 200:
                print("‚úÖ Service-b call successful!")
            else:
                print("‚ùå Service-b call failed")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Service-b call failed: {e}")

    def test_document_operations(token):
        """Test document operations on service-b"""
        
        if not token:
            print("‚ùå No token to test with")
            return
        
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # Test different document operations
        documents = ["doc1", "doc2", "doc3"]
        operations = ["view", "edit", "delete"]
        
        for doc_id in documents:
            print(f"\nüìÑ Testing document operations for {doc_id}")
            for operation in operations:
                url = f"https://service-b.app.svc.cluster.local:8080/documents/{doc_id}?action={operation}"
                
                try:
                    response = requests.get(url, headers=headers, verify=False)
                    status_emoji = "‚úÖ" if response.status_code == 200 else "‚ùå"
                    print(f"  {operation.upper()}: {status_emoji} {response.status_code}")
                    if response.status_code != 200:
                        print(f"    Response: {response.text[:100]}")
                        
                except requests.exceptions.RequestException as e:
                    print(f"  {operation.upper()}: ‚ùå Request failed: {e}")

    if __name__ == "__main__":
        print("üß™ Testing OIDC User Authentication Flow")
        print("=" * 50)
        
        # Check our own SPIFFE identity
        spiffe_id = get_spiffe_id()
        if spiffe_id:
            print(f"üÜî Test pod SPIFFE ID: {spiffe_id}")
        else:
            print("‚ö†Ô∏è  Test pod does not have SPIFFE identity")
        
        # Test users we created earlier
        test_users = [
            {"username": "alice", "password": "testpassword123"},
            {"username": "bob", "password": "testpassword123"}
        ]
        
        for user in test_users:
            print(f"\nüìù Testing authentication for user: {user['username']}")
            token = get_user_token(user['username'], user['password'])
            
            if token:
                # Test calling services with the token
                test_service_with_token(token)
                test_service_b_with_token(token)
                test_document_operations(token)
            
            print("-" * 30)
        
        print("\nüìã Next steps:")
        print("1. Ensure SPIFFE OIDC application is created in Authentik")
        print("2. Ensure service-a and service-b are running with SPIRE")
        print("3. Check that Authentik is accessible within the cluster")
        print("4. Verify OIDC token validation in both services")
        print("\nüí° To run this test from within the cluster:")
        print("kubectl apply -f test-oidc-flow-deployment.yaml")
        print("kubectl logs -l app=test-oidc-flow -f")

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-oidc-flow
  namespace: app
  labels:
    app: test-oidc-flow

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-oidc-flow
  namespace: app
  labels:
    app: test-oidc-flow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-oidc-flow
  template:
    metadata:
      labels:
        app: test-oidc-flow
    spec:
      serviceAccountName: test-oidc-flow
      containers:
      - name: test-oidc-flow
        image: python:3.11-slim
        command: ["/bin/bash"]
        args:
        - -c
        - |
          pip install requests urllib3 && \
          python /scripts/test-oidc-flow.py && \
          echo "Test completed. Sleeping to keep pod alive for log inspection..." && \
          sleep 3600
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
        - name: spire-agent-socket
          mountPath: /tmp/spire-agent/public
          readOnly: true
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: REQUESTS_CA_BUNDLE
          value: ""
        - name: CURL_CA_BUNDLE
          value: ""
      volumes:
      - name: script-volume
        configMap:
          name: test-oidc-flow-script
          defaultMode: 0755
      - name: spire-agent-socket
        hostPath:
          path: /run/spire/sockets
          type: DirectoryOrCreate
      restartPolicy: Always
