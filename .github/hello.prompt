I’m designing a secure microservice architecture for Kubernetes using:

- SPIRE (SPIFFE) for service identity and mTLS
- OAuth2/OIDC (Authentik) for user authentication
- SpiceDB for centralized, unified authorization for both users and services
- Istio Ambient Mode for zero-trust networking and traffic management without sidecars

## My goals are:

- Zero shared secrets for service-to-service authentication (use SPIRE)
- No sidecars — Istio Ambient Mode should provide network-level identity and policy enforcement
- Unified authorization across user and service identity using SpiceDB
- External frontend lives outside the mesh and authenticates users via OIDC
- API Gateway (Envoy, Istio Ingress, or similar) verifies tokens and SPIFFE IDs
- SpiceDB is queried for fine-grained access control using service/user identity
- Workload identity from SPIRE should be available inside Istio Ambient mesh

Can you create a PoC project that includes:

- Minimal Kubernetes setup (Kind)
- SPIRE deployed and integrated with Istio Ambient for issuing SPIFFE IDs
- An OIDC provider (e.g., Keycloak or Authentik) issuing access tokens
- Istio Ambient Mode deployed and configured (ztunnel + secure overlay)
- SpiceDB with schema defining users, services, resources, and permissions

A demo application stack showing:
- A minimal user-authenticated frontend route
- A service-to-service call authenticated with SPIFFE ID wirtten in golang
- Authorization logic enforced centrally via SpiceDB queries

Example manifests, Dockerfiles, SpiceDB schema, and demo data

The final result should show:

- User login via OIDC, token passed to API Gateway
- Gateway verifies user and SPIFFE identity
- Call allowed only if both user and service have required relationship in SpiceDB

